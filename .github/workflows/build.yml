# Simplified Build workflow using uv and its setup action
# This workflow uses the official `astral-sh/setup-uv` action which
# installs uv, configures Python, and optionally handles uv's cache.

name: Build

on:
  pull_request:
    branches:
      - main
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    name: Build on ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Windows"
            os: windows-latest
            python-version: "3.8"
            artifact-name: RootPainterInstaller.exe
          - name: "Ubuntu"
            os: ubuntu-latest
            python-version: "3.10"
            artifact-name: RootPainter.deb
          - name: "macOS"
            os: macos-latest
            python-version: "3.9.5"
            artifact-name: RootPainter.pkg

    steps:
      - uses: actions/checkout@v4

      - name: Set up uv and Python
        uses: astral-sh/setup-uv@v6

      - name: Build software (PyInstaller) — macOS
        if: runner.os == 'macOS'
        working-directory: painter
        env:
          UV_PYTHON: ${{ matrix.config.python-version }}
        run: |
          # macOS: use .icns icon and build a windowed .app bundle
          uv run -m PyInstaller \
            --noconfirm --clean \
            --hidden-import pyqtgraph.graphicsItems.ViewBox.axisCtrlTemplate_pyqt5 \
            --hidden-import pyqtgraph.graphicsItems.PlotItem.plotConfigTemplate_pyqt5 \
            --hidden-import pyqtgraph.imageview.ImageViewTemplate_pyqt5 \
            --workpath dist/tmp_files \
            --name RootPainter \
            --icon src/root_painter/icons/Icon.icns \
            --specpath dist \
            --windowed \
            src/root_painter/main.py

      - name: Build software (PyInstaller) — Windows
        if: runner.os == 'Windows'
        working-directory: painter
        env:
          UV_PYTHON: ${{ matrix.config.python-version }}
        run: |
          # Windows: use .ico icon
          uv run -m PyInstaller \
            --noconfirm --clean \
            --hidden-import pyqtgraph.graphicsItems.ViewBox.axisCtrlTemplate_pyqt5 \
            --hidden-import pyqtgraph.graphicsItems.PlotItem.plotConfigTemplate_pyqt5 \
            --hidden-import pyqtgraph.imageview.ImageViewTemplate_pyqt5 \
            --workpath dist/tmp_files \
            --name RootPainter \
            --icon src/root_painter/icons/Icon.ico \
            --specpath dist \
            --console \
            src/root_painter/main.py

      - name: Build software (PyInstaller) — Linux
        if: runner.os == 'Linux'
        working-directory: painter
        env:
          UV_PYTHON: ${{ matrix.config.python-version }}
        run: |
          # Linux: no special icon required for the executable; package later into .deb
          uv run -m PyInstaller \
            --noconfirm --clean \
            --hidden-import pyqtgraph.graphicsItems.ViewBox.axisCtrlTemplate_pyqt5 \
            --hidden-import pyqtgraph.graphicsItems.PlotItem.plotConfigTemplate_pyqt5 \
            --hidden-import pyqtgraph.imageview.ImageViewTemplate_pyqt5 \
            --workpath dist/tmp_files \
            --name RootPainter \
            --specpath dist \
            --console \
            src/root_painter/main.py

      - name: Make installer (macOS)
        if: runner.os == 'macOS'
        working-directory: painter
        env:
          UV_PYTHON: ${{ matrix.config.python-version }}
        run: |
          uv run pkgbuild --component dist/RootPainter.app --install-location /Applications dist/RootPainter.pkg

      - name: Make installer (Linux)
        if: runner.os == 'Linux'
        working-directory: painter
        env:
          UV_PYTHON: ${{ matrix.config.python-version }}
        run: |
          uv run scripts/make_deb_file

      - name: Make installer (Windows)
        if: runner.os == 'Windows'
        working-directory: painter
        env:
          UV_PYTHON: ${{ matrix.config.python-version }}
        run: |
          makensis.exe scripts/assets/Installer.nsi

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: Package-${{ matrix.config.name }}
          path:
            ${{github.workspace}}/painter/dist/${{ matrix.config.artifact-name
            }}
          if-no-files-found: error

      - name: Publish packages to PyPI with poe
        if:
          startsWith(github.ref, 'refs/tags/') && matrix.config.os ==
          'ubuntu-latest'
        shell: bash
        run: |
          uv run -- poe release
        env:
          POE_PUBLISH_INDEX: pypi
